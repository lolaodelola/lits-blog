---
title: learning_to_code_for_everybody
blog: podcast
published: true
date: 2019-01-29 23:58:34
duration: 00:43:24
description:
audio_link: https://lits-podcast-episodes.s3.eu-west-2.amazonaws.com/audio/learning_to_code_for_everybody.mp3
---
<div class="row">
<audio controls src='https://lits-podcast-episodes.s3.eu-west-2.amazonaws.com/audio/learning_to_code_for_everybody.mp3' class="col-md-12">
      Your browser does not support the <code>audio</code> element.
    </audio>
</div>
Transcript unavailable

[//]: # (we made it. We survived the fire that wass 2018 Happy New Year. Welcome back to Lost in the source. I am your host Lalla on DH today, I'm going to be talking about learning, learning how to code and just learning in general as we come into 2019 January's like the reset month. Symbolically, it's the months for changes the month for picking up new habits, new talents, new skills on basically just making yourself hot. You know, like making yourself the best this off the best, right? So today I'm gonna be talking about learning, learning how to code. I'm not going to go too much into Resource is on things. I think I have an episode about it already. If I don't, one will be coming up. But there's loads of stuff on Google anyway on DH, then in the source, we're gonna be looking at What's the back and engineer? What's the front end? And, you know, it's a full stack engineer for people who don't know for people who see these words splattered everywhere and have literally no clue. So let's get into the main topic. So learning, being an engineer is really about? Well, no entirely, but partly about knowing how to learn on DH. I think that was a big shift for me when I started learning how to code, because I went from a environment university environment on studying English literature and creative writing, which is very individualistic. It's very I mean, we had group tasks, obviously, but majority Bach off the course was about writing by yourself, reading by yourself and then discussing those things later. But a lot of it was, you know, alone. And then I shifted into Lenin House occurred and I still that had that kind of like solo Dolo mentality on. It didn't work for me where it works for me in you and you need it didn't work for me in engineering on DH. So I had to. She had to change. I had to shift. Then there's some things that I think you shouldn't know when you're learning anything new, right on one of those things is you need to know how you learn. You need to know how you are able to consume and retain information and then regurgitate it at will on. I'm not talking about the learning you do in school where you essentially, like, taught how to cram for big for big test the event on DH. Then, once that test is over, you just like forget everything. I'm talking about learning in a way that helps you retain the information on people. Learn in different ways. For some people that school environment is really useful. That's the best way to learn That's the best way to consumer retain information for other people. That environment is useless doesn't mean anything. They don't get the information, the content that they need, and they're unable to be practical. Use that content and information practically for me. I know the island best in a kind of seminar setting. So where I'm able to be told, an idea or concept, and then I'm able to discuss it, I'm able to kind of like explore it verbally and hear other people exported verbally so more of a discussion, setting more of a discussion environment. That's best for me, where I'm able to ask questions, receive answers on DH. So when I have first lot of London house code, I was learning by myself at my House Suk Academy and Co. Academy is a at the time, not sure what's like it now, but call Academy at the time was very handheld. It was pretty much Hey, right this thing and then you write the thing and then it's not welder and you got it on for me. That was not enough for other people. That may be enough, but for me, that was not enough. And I wasn't confident that I was actually learning the concepts that was being Tongkah Academy. So I moved into a boot camp setting and a boot camp is pretty much like an intensive. I have a whole podcast on my boot camp experience, but since she's in intensive learning environment where you learn how to code for a set amount of weeks or months on, it's just really intensive. Hence the name boot camp. And it wasn't I mean, for the 1st 4 weeks on my boot camp, I was failing, and that's because I still had that university man set off like a very individualistic learning. And then it wasn't until I started, like taking the best parts of union. What what what were the bits of uni that I really, really felt like I gained the most out on those of the seminars on DSO. Taking the best parts of me, I started asking questions. I started talking to my appears about stuff that we have learned and we were, you know, trying to figure out together. And that helped, ah, hole that helped shift and change things a lot because, I mean, my tutto wasn't the single source of information. If I didn't understand something, my tutu said I could not someone else who may explain it in a better way for me right on. So when I did that and I really, you know, created the ideal environment for me to learn personally, that's when I started to grow and I started to explore. And now that it's not really conducive for me to be in a boot camp for classroom or similar um, setting, I have to create that environment with the resource is that I have Andi. I think this is the place where a lot of people are, whether you are learning how to code as a begin, our you know, you're in the industry and you you don't have time to go to classes or, you know other things. How do you create the idol? Learning and bam? Oh, the resource is you have You have to be creative. You have to really, really be creative on DH. By that I mean so I'm going to just be using myself as an example. But for example, I this year I want to learn algorithms and data structures. I want to be able to describe things in Oh, and look Oh, Logan and all of this stuff. I wanna understand data structures. I want to understand how, um when to you, certain data taps over others when the best time to optimise is howto optimise. What kind of algorithms work best in what kind of scenarios, Right. And so for me, I can't go to university to go back on land. I mean, I could be pretty expensive on DH. I don't have a, um any classes that I've seen that I can go to that will fit within my schedule. So I have for a bunch of video tutorials from a website. Will you do me on DH? They have two tours unloads of things not just code and related, but that business and marketing and those of things on DH. The way the two tours a setup is that person does about records, a bunch of bite sized bridges. I'm talking anything between 3 to 10 minutes where you can, you know what a video on a concept in that time, and it is part of a longer lecture series. So you have a bunch of lecture series on DH, you know, small bite size chunks in between on then you also have, like, interactive tests where it's like you know, no where it's like consolidating the stuff that's in the videos in between. This works for me in terms ofthe receiving the information, but in terms of being able to discuss the information it I mean, I can ask questions in a form, I think. But it's not the same as asking or talking to someone. And so that's where my community and my network comes into play, right? So I am able to talk to friends who know this stuff I have. One of my closest friends is the person who really shifted me in this direction to learn this stuff, and he knows this stuff. I mean, he can't regurgitate algorithms off the top of his head. But he knows this stuff. He understands this stuff. He talks about this stuff in his daily work life and so I can ask him questions and we can discuss it. We can explore ideas, and then I have my mental Luke, who probably doesn't know I'm doing this yet. But, you know, I can talk to him about this stuff, too. And if I didn't have either of them, there would be things like to attack it. You know, talk to Twitter about this stuff. I could tweet about this stuff. Um, hopefully people tweet me back and say How that's not quite correct or that's actually exactly what it is. Oh, I could go to stack, overflow and ask questions since back overflow. Or I could Google see what other people have said and kind of for my own thoughts. Or I could create a port costs and talk about this into that, you know, it's just it's when people would respond to the podcast. Hopefully, our Kurata block post, you see where I'm going with this? There are loads of avenues where I can ask questions where I can give feedback on the things that I've learned on other people would then give me feedback on my ideas and my thoughts about those things that I'm creating that kind of like digital seminar setting, that interactive seminar setting that doesn't need to be confined to a classroom or a physical space. And this is help me learn and understand things are spoken about constant time. Um, and could the constant time of an algorithm like Cohen so much in the last few weeks, more so than I ever have in my life? And so now I really understand. More constant time is right, I may know, understand how Teo talk about space, constant space and stuff like that just yet, But I will eventually on DSO. You really need to be creative when you are creating your learning environment, and that includes looking in places where you know you may use for other things. I used to say, as a social tour, predominantly, but now it's also a learning tool. Um, I follow. I'm on mediums. I read articles and things other people have returned. I listened to other people's podcasts and stuff like that, just really using the resources I have to build the ideal learning environment for me on DH. So in order to do that, you need to know how you learn. I know that I learned in the seminar setting You need to know what resources you have available to you as well. Um, and so Googles the best resource. I think he just search if you don't use google dot dot go. And you just such whatyou're tryingto well, there are tests you can take, So there are tests you can take that will tell your learnings that whether it's like kinetic auditory visual and accept cheques I know for me it's a mixture. So hence why the seminar sets and kind of works for me. Um, but but you may be something completely different and those tests help. I don't know how you saw they are there not, But those tests apparently do help. Another thing that I'm that's gonna kind of like help with my learning and understanding is I've created a curriculum for myself, and the way I did that is going to be different to the way. So the way someone who's been in the industry will choose the topic Stain should learn is going to be different to the way somebody who's just starting out should choose the topics. So I'll start with the Black Begin and then I'll goto the way I did it. So begin. A person is not gonna know where to start from. You don't know what Teo even look into Andi. I think the best thing to do in that scenario is this. Try things out. Try tasting. See is all I like to say, Yeah, when I was starting our own code cattle man, I just tried a bunch of programming languages. Hey, html CSS job script. Ruby and Rubies were really fell in love. Hasty Marcia's Cecil call fun on a lot of people's issues. Start with that those languages because there's a shorter learning curve. But for me, that's not really where things started. To judge it really enjoy the front and until later in my career, but re bees were really fell in love on DH. Then I started looking for Ruby tutorials online, and then I decided, Actually, it's best for me to learn in a boot camp setting. Are there any, you know, short courses or whatever that will teach me this stuff you should taste and see. Another friend of mine also didn't really judge Hasty Mon css um side of things. So he went straight into room pretty much and then picked up the rest as he went along. I know people who do not even know. Hey, c'mon css it all on DH. They are like job engineers or pearl engineers like they didn't follow that route on. That's something to note. The road that you follow on that you go down doesn't have to look identical to anybody else's road. Your journey is yours. Your journey is different. You're Jenny's unique. It doesn't have to look like other people's. It can. But just because it doesn't doesn't mean it's invalid. So tasting and seeing what you like, what you enjoy, or even if you don't enjoy what you can tolerate, what languages you can tolerate on as a sake academy at the time from you is a good starting point. I think now it's not free anymore. You have to pay, but I think they're like free trials and stuff like that. And the reason I used academies because you have so many programmed languages right there, you don't have to do too much. Searching is just all there and so out safe. Do a free trial of co academy and see like you know, the first few languages. See how you feel about them. See, um, if anything intrigues you, excites you and then move him there. When you've picked a language or when you've picked a framework, you can kind of see what the fundamentals are in this room is what the basics are. You started the basics. And so if Coke Adam gets too expensive, we don't want Coke, and he's not the best place for you to learn. You might want to consider drilling a boot camp you might wanna consider going back to uni, or you might just want to see what's online. And so textbooks and resource is on mine. And so you will Google. You will search for basics in, for example, Python Python Fundamentals Foundation Python course, and you get a whole bunch of stuff that will teach you. The foundation's off that language, the basics off that language, And so you start with tasting and see what's out there, choosing something you are interested in and searching for the basics in that language in that framework. What one of the basic building blocks that you have to understand to really get how this works now that's for someone who's it began to kind of just working were from there. Once you've done the basics, then you can look at intermediate stuff, you know, get progressively harder as you go along. And then eventually what you might want to do is look at job descriptions. Full engineers in that programme longer. So you might want to look at Junior Python engineers what they expected to know in the job description, I'll tell you, like what? You shouldn't know what they expected to know, and you might wanna like. Make sure you understand this. And don't just look at one of description. Look at a few and you just make sure you know and understand those things. And this is if your learning by ourselves we're learning in a boot camp, you be taught the bet they'll have a curriculum before you. But if you're building your own curriculum, you will need to use all the resources available to you and I think job descriptions, especially when you feel a bit more comfortable with the basics on the intermediates. The job descriptions really, really help to know what really life engineers Cos. Expects of you. And, you know, using tools that you to me where the video tutorials are, you know, adequately labelled This is for beginners, path of engineer. This's for intermediate. This is what France or whatever on DH, they usually have, like a lecture series where they teaching. I do have the paper two tours on you know me. But they do a lot of sales. I've never had to pay full price when they do loads of cells rabble in times of the year. So I would say, if it is full price, maybe pop back in a week or so and see if it's the full price for someone who's been in the industry a bit longer, though the way I have decided I got my curriculum is just looking at what's hot that I don't know. And also where are my knowledge gaps? What do I want to know? That I don't know. And if I want to get to the next level, what does the next level? No, I don't know. On these away these are the three ways I've decided to build my curriculum. So I knew that a knowledge gap for me was, as I said, algorithms and data structures. I don't know about that stuff and I think I should. And something that's hot is reacting. Re ducks, although it's that is still getting hot. But you know, we'll see what the next best thing is. Something that's what is reacting. The Ducks and every time I've tried to learn, we have to re ducks. I'm fairly productive in reactionary ducks. But I'd like to be more productive and really be comfortable. And every time I've tried to do that has been in an environment that's not been conducive to my learning. So now that I have an environment that created myself and that I have control over, I think is a good time to learn reacting re ducks on DH, then you know, skills that engineers above me have that I may not have a CZ well being able to really deep dive into problems and, you know, think about problems in an abstract way and knowing that there are many different solutions to the problem and no, which solution to choose things like that. Um, I want to get better at. And so that's how I've been able to build my curriculum. I've been ableto look at different holes basically my knowledge, and tried to fill them on DSO. That's how you know, beginning confuse their topics and more so on who's been in here for a while can choose their topics as well. And another thing to kind of consolidate your learning is you need to be able to practise on. In this context, that means building you need to be able to build building is really essential to consolidate the things that you know. Um and it doesn't have to be the next best thing. I think maybe sometimes I stop. I mean, that's what has put me off in the past. Like, are the thing I built? It has to be useful. Those people after you use it, it has to be, you know, hot. It has to be attractive as Toby. This has to be that and no, really does it. I mean, if you're learning Ruby, build a calculator. Nobody has used a calculator, but you are consolidating certain things you're consider getting your operations work. You know how to use an array. If you need to use an array, you know how to get You know how to get data from a user. You know, you know, you know certain things, right, And and no one's gonna use that calculator, but that doesn't matter. You are practising. You are just build into practise. And you know, the more you build it, the more you practise those skills, The more become second nature this things that I do now. That's just second nature, that when I started programme and I'd even know what they were, you know? So it's about building. Just keep practising and build small, small things Don't go for the giant mammoth APs straight away. Build small things. And that goes for whether your new engine and order engineer or the eldest tension is you want to keep building small things by size. Things. I think glitch is a really good place where you could find small bite size things to build in remix and re fix on DH ideas and stuff of things to build. I think his glitch dot com by minor be klicks dot com. I'll put the put the website in the description, but just ideas of building small things. Also, building is not the only way, depending what you're learning. You may also want to solve problems. Um, I keep using the data. Shutters and mark are those as an example, but in learning that, you know, it is difficult. What can I build with ex algorithm or with wide a two stretch? It is It is kind of the wrong way to think about that. Rather what problems can be solved. And I think I use Project Oiler a za place to practise product Oiler. I think there's another one. Oh, are these cutters? Is that Africa was called, But I'll find it, um, but Project Boiler is a good place. It just has, like, a whole list off problems. And they can elect math, see problems, But that's a good place itches on and its language agnostic. So it doesn't matter what language you're using, as long as the language can, you know, do maxim dates of structures and stuff. But I'm able to just practise the stuff I'm learning. Andi, you know, think about problems in new ways, right? So building on also problem solving really important to consolidate the things that you're learning and know what to use when you know, and to use both as well. People also, you know, really value side projects. I must, I guess, because my biggest iPod it's his black coltec. I have gotten away with not really doing the whole side project thing. Um, side projects. I think our unfairly valued. Not everybody has the time to do side projects, and everybody has the capacity to decide projects on everybody wants to be separatists. I mean, in your free time, you don't necessarily wanna code. And that was me for the whole of 2018. In my free time, I didn't want to code. I wouldn't want to do anything tech related. I didn't do any talks or extra workshops outside of black art cheque or anything, because I wanted that time for myself. And I think that's fair. Um, so that's not to say that you shouldn't do sad projects, do side projects if you want to be separatists, if you have time to do side projects. But when you're under the man and phase, you also do you have to be mindful of you need to make time to practise on DH. So if you don't have time to practise, it's gonna take a really long time for you to learn the things that you need to learn. Um, you need to be able to show the theory he needs to be able to show you're working essentially so sour. Budget side projects are good for that. If you work in an environment, though, that allows you to learn on the job. That's fantastic. On DH, you can do this through the lot Black. Caltech has a scholarship programme for complete beginners where we pay, um, your living expenses. Teo work with a company in this year last year. So it was eight. Right? And they will teach you how to code. They haven't academy where they'll teach child's code for three months. And then you go into an internship programme and et cetera, et cetera. And that's the perfect lead. An environment, right. Um oh, if you look more further long and your your job allows you, you know, invest into Helen. And so one of the places I works, they got me a mental. They also got my manager mentors Wasit wasn't just like a beginner thing. They got me a mental. I was able to work on things that in the past I wouldn't have been able to work out on other jobs. They come in, like, threw me into the deep end, but gave me a life dressed, you know, they said, Yeah, we just they didn't have a big team, so things just needed to get downstairs like we need to get this done. But we will help you along the way. You're not gonna drown, you're not gonna sink, you're gonna flow. And we will carry you if we need to carry you on. That was a really, really good environment for me to learn, So I was able to build. I was able to practise, you know? So that's it was amazing, to be honest, two more things that I think are really imported specifically in learning how to code reading the code on DH, being able to recreate things already out there. So I guess reading the code is this is a really way to understand how your programming language works. If you are learning, hates him. L will css a really good way to be. The code is just Teo. See final words that that you really like on DH. See what it's built off on? The way can do that is if you go to a website in just right click and you see to things. You see a few source and you see inspect view source will give you the whole hate tear mouth for that page. And probably some javascript too. And inspect will open up a little window, maybe to your side of your screen, not at the bottom of your screen on I will show you the hate tear my elements on the page and also show you Ah, the CSS rules. So you, Khun Total CSS rules and you can kind of play around with CSS rules and see what happens when switch this thing off happens when change the colour of the fun size of the text of this thing and we need to fiddle with things and see how other people are building their websites. What are the tricks and tips people are using to build their websites? And if you're not using hgh hmrc assess you, Khun, go to Code Cat and Niko Academy could goto get hub and find a maybe a popular I'm repository on Get hub everybody. We use gems so find, you know, popular Jem, maybe device. And that's a popular authenticating gem. And just start reading, maybe start of the controllers, because the controllers are usually the easiest to read, in my opinion, on DH, then move on to your models and read line by line. It can be overwhelming, and I think there may be some resources are there to see the best repositories to read from the Learn how to code. Um, but start line by line on. I would recommend do this when you really have some kind of grasp on the language, they're not wearing you like a complete beginner because they'll be overwhelming. It will be fought over. But when you have some kind of grasp of the language, or if you've been an engineer long enough on breeding code is not daunting to anymore. It's still a really, really good way to learn on toe, understand how the language works, how the boot and Brooks are formed on DH, being able to recreate something called us already out there something so the front end is not my strongest point, but I'm able I'm productive, innit? I'm able to create things in it On DH for me, Something I've learned is that I love the things I want to do. Other people ready, done them. And so instead of breaking my head trying to figure out how do I do this thing I look over other people done particularly paged him on CSS I look at OK, this is how this thing is done and I just re create it. I might tweak it to make it. It's the end of what I'm building, but just being able to look at what other people have done on every career helps you pick up skills and also helps you understand better because, you know, this works here. Okay, How do I make it work here, You know, and it's a really, really good way to be productive. And it's also a good way to learn and understand things. I hope this topic has made sense is a bit rambling because, like, I'm just may talking from experience here. So you need Teo. Go over the things you need to learn how to learn. You need to figure out what your best environment is for learning. I'm going to be able to choose the things you learn. Um, and I kind of gives a few tips on how to choose what to learn. One. To learn it, Um, you need to practise problem solving to practise building. You can do that through side projects if you want to, but it's not by force, and you should read code read code, and we create something cool that's already out there. Now the re created something called That's Already out there works a lot better for the front end than it does with back in. I wouldn't recommend if you are rebuilding their China recreate device or something big like that. But as I used the example earlier like build a calculator, I'm sure sounds really built a calculator and use that to understand what's going on. Bill Tick, tack toe. You know, basic things like that on Twitter. I arts work to let me know what they want to know before they start. Then it has code on also what they wish they knew before they started learnin hearts of code. So a few people got back to me, one person said. How are you able to learn two languages at the same time without getting confused? Something to understand what you're learning? Programming languages is that ultimately, apart from land, the syntax you are learning concepts you're learning programming concepts, which are really applicable across the board. So, for example, if your learning JavaScript and Jelena Ruby you learn programming concepts such as a conditional such as variables, which essentially do the same thing or similar enough things in both languages, so it doesn't matter if you learn a reveal A Ninja Scripts, you're learning that concept. The difference will be how that thing is written in each language. What's this syntax for conditional in Ruby, What's the syntax for conditional in Java? Script was the syntax for variable and really wants this intact for variable and JavaScript. And if you get that wrong sometimes that's fine. Just fix it. Um, I get it when I switch between languages really quickly. Sometimes I make that mistake, but ultimately I know that you're learning the the principle rather than you know the actor implement you me or question learning the implementation of the thing. But above all, you're learning the principle of the thing, right? And, yeah, I think that's what's helped me A lot more is that know that, Oh, it's not wrong to do an if statement and Ruby because that's valid is just how I write in your statement in job scriptures. Also, valid issues about how I write in fixing syntax is literally the easiest thing to do in terms ofthe. That's how quick it is to fix. You don't have the rejig how you think or anything. It's just, Oh, you've missed this way should have included that Something someone else's said is Chima has angst or has said that he wishes he knew self that was part off the job. Now many folks fall into two camps when it comes to just in general life. Either you have impostor syndrome. We have this other thing, which I for one of the name ofthe rights, like you're overconfident. You think you're super super smart. You think you just know everything because engineering is hot, engineering is difficult. Engineering is not easy when you're learning. It is very easy to feel like you don't know anything because engineering is also involves continual learning on DH. It will always be hard. That feeling really doesn't go away unless you fall into the camp of people. That's like I know everything right, But that feeling really goes away and you is easy for you to fall into black holes of like I don't know anything. This is all too difficult, too hard for me to comprehend. And it's not the things that you didn't know a year ago. And you know now we're hard to comprehend. But you comprehended them. You figured out you understood it, and now you're able to use those things and understand those things and be productive in those things. And that's kind of how I look at it is I do get a lot of impulsive syndrome. But, you know, looking at where I was a year going, where I am now is a sight to behold. I did a Project Oiler task the other day, and I finished in, like, five minutes on. There's no way I would have been able to finish that quickly a year ago. You may be a few months ago, right? So really keeping track of your progress, I think, helps with the self doubt because in times and you're dying yourself, you can just look back on what you've done. And I think that's actually a really good rater. Mitigate that, but also knowing that that's kind of I don't say part of the job. But I haven't counted very few engineers who don't have that or who have never had that mrs say that, um, something both Chima on DH someone, Els only have said, is also that they're different avenues to a career. And what Ali said specifically was, um, there's no one true road map, and that's so true. And I think I mentioned this earlier. Your journey will be different to somebody else's journey, and that's fine. You both reached the same and destination. You take the path that suited for you. That's best for you. And they take the part that suited him best for them. And that may look like you go into you need that may look back. You go into a boot camp that may look like neither of those things. It may look like you learning hasty, Marcia's says first, and then looks like you're learning hasty Amar CSS last and we look like you never learn in haste, Iman CSS. That's fine. The key thing is that you are productive and that you know what you need to know to get the job done. And on that only also said that they wish they knew, um, that you can learn without you need a boot camp for inexpensive course, but the latter. Or make it easier on that's true. You can learn by yourself you can learn. Alone, however, is so much easier to go to uni or a boot camp for multiple reasons, apart from the fact that you be learning on the curriculum is like Bill intended for you. Um, there's also the thing off networks and community that you develop that will be harder to develop by yourself. Access to jobs. Access to resource is access to specialists and, you know, experts in the field, et cetera, et cetera, that you may not get if you're learning alone or maybe harder to get. If you're learning alone, so doesn't things people wish they knew before they started Lenin's quota. While their coding. I think I may do this more often. Us, you know, to tow, tow, you know something and then talk about it on the podcast that let me know how you find that if there is anything you want me to talk about, a podcast tweet me. The handle is at lost in the source. Very simple. Very basic on DH. Yeah, Let's get in the source in the source today I am going to very quickly go over the difference between a back and engineer of front end engineer and a force back engineer. So a back and engineer is someone who deals with the back end, and the back end is the bit off the application, the programme that you cannot see that really bills of data retrieval and presenting data around, you know, sending data here there and everywhere on DH. There's a lot that goes into the back, and so we're talking databases. We're talking controllers and models back background jobs and tasks. We're talking, you know, a whole bunch of stuff, basically, and a good example is a form. So when you hit a website and they ask you to sign up and you have a form that said, give me your name, your email address and I posit an apostle confirmation when you hit? Submit that data that you've given your email your name possible Possible confirmation. That data is like basically goes from what you've attached to the back end on in the back end. It's, you know, saved into the necessary tables. It creates the necessary objects it needs to create on et cetera. That all happens on the back, and you can't see that. But because that happens on the back end, it means that when you return to that website, it's that are filling that same foreman again, or you need to do is fill in a look in form on what you've locked in. You know, the same thing happens that data goes, saves into where it needs to save two, and then sends you to where you're able to go. But without the data being saved on, transported on without those obvious being created, you literally all you be able to do is fill in the form. You wouldn't actually be able to submit that data, which brings me to the front. So the front and if the back end is all about, you know, data and retrieving data saving dates on creating objects based on the data receives. The front end is about displaying. So the friends literally everything that you can see that includes the colours, that text, the type, the design, all of that stuff. That's the front end and also some some interactions rich art, which is many jobs keep. So you know, some certain animations and you know, when you hover over something and another thing changes colour hair or there Or, you know, and certain things like that that is the front end. Everything you can see everything you can interact is the front end on DH so false that brings both of these two things together and says You can do both back handing you, Khun, do both front and certain example off a full stack framework. I don't know if they're any fools. That language is off the job. Script does try to be a force that I don't see does try. John Skit is considered a full stack language because you can use job skirts with on the front end on on the back end. But the back end is kind of I'm not going to confuse you. JavaScript is considered a force that language, but typically you have forced that frameworks of ruby on rails is one of those framers and and allows you to do both back end stuff really nicely and front and stuff. We nasty all in one place, and he said she using a few different languages, but all in one place. It doesn't feel like using too many different languages, but really you're using, like hasty MLC assis on DH ruby and then some rails, and then some P R B again, I'm not going to confuse you, but, yeah, Rails is a full stack framework. Job script is considered a full stack language on force. That just means you're bringing the two together. You're bringing back end and you bring in front end. Well, let me just quickly get some examples off some front end languages, I think, has that hating Marcy Assess Hamel SCS says he's our friend and back end would be stuff like Java, Ruby Python as well on. I think Django is a python forced back framework. And so, yeah, that is back in front end and full stack. So when you see job descriptions asking for back and engineer, they usually want someone who's going to deal with the dates of Basie type stuff and building infrastructure type stuff, really building out the how data moves through the application and how messages passed through the application. If you're looking for some an engineer role that says front and that's probably looking for someone who's going to display that data to the user and really think about how the use and navigates through the website or through that Web app. So the application on If you're looking at four stack, you're looking us on who's gonna be a bit of both. So yeah, that is it. This is the first episode of 2019 is a bit of a long one today if you stuck through. Thank you. I hope I haven't been to Ram. Billy. Make sure you follow me on Twitter at Lost in the source. I'm send me questions if you have any on DH. Yeah, I will see you next time. Bye.)
