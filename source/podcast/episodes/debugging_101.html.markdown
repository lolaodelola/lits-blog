---
title: debugging_101
blog: podcast
published: true
date: 2017-03-06 21:56:04
duration: 00:23:25
description:
audio_link: https://lits-podcast-episodes.s3.eu-west-2.amazonaws.com/audio/debugging_101.mp3
---
<div class="row">
<audio controls src='https://lits-podcast-episodes.s3.eu-west-2.amazonaws.com/audio/debugging_101.mp3' class='col-md-12'>
      Your browser does not support the <code>audio</code> element.
    </audio>
</div>
Transcript unavailable

[//]: # (So if your organisation who's had issues similar to uber, um and just needs help, you know, or hasn't had issues similar to you but in terms of sexism but just doesn't doesn't know how to get the team's right, You know, people quit all the time. You don't get much attention and all of this kind of jazz are You don't have to treat women or ethnic minorities or members of the LGBT community. Then this is for you. Hello and welcome to lost in the source. I am your host, Malala Andi is good to be back. This is like five episodes deep now, so it kind of started to feel a little bit more permanent like I'm here to stay. Hopefully I am as one say thank you to everyone who's been mission. And so far the feedback has been amazing. If you love what we do, definitely tweet us. I say us is just me on this podcast. But if you love this podcast, if you enjoy, just tweet at lost in the source and let us know if you don't treat us to or maybe GMOs because that's a little bit more private. Um, give US suggestions. Give me suggestions to improve. I just wanna make a quick public service announcement as well. My studio is also my bedroom, and I live in my mom's house. I'm like many millennials, and my brother's dog is eating outside my room. So, like if you hear like weird noises, it's not meets the dog on. I'm not just blaming the dog. It actually is the dog. So, yeah, let's get into this episode today we're going to be talking about debugging debugging your code and just how Teo track bugs down. I'm not going to be explaining how to fix code, because obviously, bugs are specific to different code. Base is two different languages, et cetera, et cetera. But I'm going to be taking you through through Cem like general steps. So how to track bugs down and find where in your code things are going wrong. So let's get into it. So what is a bug? A bug is basically a bit of code that's not working as you expected. Toe work or that's broken is basically a broken bit of code on DH. This break could be anything from a missing comma or an extra calmer weather is not supposed to be one, or it could be calling the wrong method or a method you are quarrelling isn't acting the right way or you're calling a method on an object that's not their certain objects that's returning Neil X like Those are the kinds of bugs you can run into, like your everyday, every workday kind of situation on DH. There are a few steps you can take Teo help you track these bugs down. Um, so I'm gonna kind of go through each step on by one on. Hopefully, can I get what I'm saying? And hopefully none of it is to like confusing. But the first step is to read your code. Definitely, definitely, definitely. Just try sitting down, taking a few deep breath and just reading the code like character by character and making sure you've got you've not got any spelling mistakes. You've not got any missing commerce or extra commerce or other punctuation, and things just are consistent. Your spacing is correct. Your tabs are correct. On things like that. You're not passing in a variable way, should be passing in a string. You're converting your string, you're converting your variables to strings where you should be. Your objects are where they should be on are not empty if they shouldn't be empty cheque for things like this. Now, if your complete beginner you may want to just focus on things like Grandma is your is your spelling correct? You know, Ah, the words in the right order where you've put them on DH, things like that. If you are more than a beginner, then you probably know what to do. But reading the code very, very carefully even taking a step back and coming back to read it will help. A lot of the time our brains fill in the gaps where the gaps are. So be miss typos very easily and things like that. So, yeah, read your code and try and trace where the mistake may be coming from. It's a lot easier to do this if you have a rough idea where the bug maybe. But if you don't have a rough idea where the bug, maybe, and something has just gone wrong in your app and things aren't displaying your app, you wanna look at the last few things you've changed in the code. So assuming you're using a of version in the word has just escaped to me. But assuming your user version control Thank you, brain. Assuming you're using version control, you'll be able to see your you'd be able to track your changes. So what you want to do is look at the last few things that were changed and what was different. So if you had a state where your website or your app was working, fine and then you change something and then it wasn't working. Go backto what you changed and just have a look at how that may have affected the whole apple, the whole site. So definitely reading your code is number one, and number two is going through your change log like what Have you changed? Another thing you want to do is Google. I keep saying this and I think I've probably said this on like every single podcast that I've done so far. But Google is your best friend. Like Google is just an amazing resource. Lots of questions and lots of answers. So I would recommend first things first. Google the AP, I docks Now if you're using something like a language like re beat. Or if you're using the framework like rails or if you're using a framework like Ah, react or you're using a language like JavaScript, there's a lot ofthe content on the Internet for you. On part of that content is the AP I what a P. I basically is a list ofthe methods and the list ofthe classes and list of behaviours that your framework or language I can do, or that you can manipulate it to do so. Re b have ah unhappy I that you could look at and has basically a whole bunch of methods on a whole bunch of classes, and it also explains what those methods and classes do. So if you're calling a method in your code on DH, it's not behaving how you expected to behave, you would go to the FBI and just make sure your expectations matches the reality ofthe how it actually does behave. And if it does, then there are more steps, which I'll go through in a minute. But if it doesn't, then you might want to find a more suitable method, or you might want to create your own method and do what you wanted to do. Another thing is looking at guides like rails. Have a really, really good guide on how Teo use the framework. So although you can sew Rubies, the language rails is the framework and rails gives you a set of rules on how to do things, and the guy'd basically tells you how to implement those rules. You don't have to follow those rules. You can do things your own way. But it's definitely better to go to the convention because when things break, it's a lot easier to fix down the road. So if the guide it basically gives you a whole like it gives you how to set up rails that gives you how to like start your first arose project, it gives you a whole bunch of content on just again methods. You can call howto, create specific files and all of this kind of stuff. So the rails guide would also be a good place to go. If you had a bug in your rolls up specifically for roles here because you could go there and basically cheque to see that you are following convention, you are following the rules ofthe arose app and if you're not. I'll recommend that you start. And if you are, and then you can kind of more quickly place where things are going wrong. So maybe it's your routing. Maybe your reach aren't matched up perfectly. Or maybe it's well, it's going to be. Maybe your classes aren't being called correctly, you know, inheriting from active record base or something like that. Right? So the guys are gonna place another good thing would be to Google your question. So think about what's going wrong. So a typical example would be my page is failing to render. And so you would ask a question to Google like, Okay, this is putting me on the spot because I haven't had a question like this in a long time, But you had ducked a question like, um, index page failing to load. Failing to render in rails on a whole bunch of content will come up on Google on your first few results would probably be from a website called Stack Overflow and stack overflows. An amazing sight that is a forum on. It's just a place of a bunch of questions on a bunch of answers on I can bet that anything you're running into someone I stack overflow has run into on DH. 15,000 other people have answered it, and I'm given a good solution. So I would definitely say Google your question and see if answer from Stack Overflow comes up. The issue is stark. Overflow is, though. Don't do not copy and paste that overflow answers into your code and then descended live because you think it's working. Definitely. Test stack overflow answers. Do not just push up stack overflow answers to life because sometimes stack overflow answers may be old and become redundant, or they're just not the best way to code things. So socko flow is definitely a starting point. And if you find that that you don't know a better way to do what's that? What the answer is that overflow is doing, then that's by all means. Fine, as long as you're happy is working, and you tested that it works in every possible scenario. So not just a happy path, not just what you expect to happen. But what if someone behaves or does something weird in your apple in your sight, right? You tested those things, so yeah, so Google and when you're Googling you Khun Google for a P I docks, you can just go go something that ruby a p a and the first hit will probably be what you want or if you're using something like JavaScript to JavaScript ap I although if you're using something like JavaScript actually m d e n I've mentioned this site before on older episode is a really good resource for Java script vanilla JavaScript and also J query Onda geun fees is often not react. React AP whatever language you are using Google that language and the letters a P I and something should come up that would be useful to you. Also guides the official guides are the best source usually, but also there are some really, really good blog's out there and people who know what they're talking about because they've used the language for, like years and years and years, or because they created the language. So guides are definitely good and stack overflow stack overflow is great. Um, and it just has a lot of answers to a lot of questions. You're probably already trying to ask. Okay, so the next thing I would say is find communities online. I've spoken about our rug before. The London will be users group. Our rug is an amazing, amazing network of people who know what they're doing. You know what they're talking about on DH, If you join the mailing list, what happens is people send in their email in their questions, like, you know, your app is broken and this specific thing in your app is broken. So has anyone else run into this issue? How did they fix the orders? This issue look familiar? Or does anyone even know what this issues about or comm point me in the right direction to trying to solve it? You can ask those kind of questions on a rug on DH. If someone knows what you're talking about, you probably get an answer. I usually see questions being answered at. They're usually see questions being ignored. I'm Ted questions. At least I don't see there's being ignored, so I mean, it's specific to Ruby, but I'm sure there are other communities, online communities and forums out there for other languages, too. You just have to google about and try and find them. I would also say get hot issues so This is, um, if you are using a gem or plug in or you're contributing to code that's hosted on Get Hub. I would definitely recommend going through the issues and searching through issues, because if something has, if it's something that has broken in the main gem or your gem or plug in or whatever it is you're using from get Hub doesn't interact with the code the way you expected. Teo. It may be the case that it hasn't done that for other people as well, so similar to get Hub I'm sorry. Similar to stack overflow, people are tracking issues and given problems on also providing solutions as well. So definitely cheque out. Get hub issues If you're using a products from get hub when I say product, not less a products created by get hub product hosted on Get up. Another really good way to debug is the rubber duck theory. Now this has helped me out many a time like I think in the past two weeks, I would say 80% off the problems. I thought I had have been solved by the rubber duck theory. Rubber duck theory is basically this idea that um you get a rubber duck and you you and the rubber ducks sit at your desk at your computer and you explain your problem to the rubber duck. And as you're explaining the problem, you you're sorry. The dog, you reach the answer yourself. So you be explaining any day. But all right there. That's the issue. Now, this has helped me so much because I don't use a rubber duck. I usually use a human being because they're more accessible. I don't have any rubber ducks, but use a human talk to yourself and just like, explain what the issue is. And as you're explaining what the issue is, you more than likely come to the solution yourself. If you don't come to the solution yourself, then try one of the other methods I said earlier. But definitely try the rubber duck theory because a lot of the time, like it just takes us saying it out loud and thinking it through because, as you say out loud, you have to think about what you're saying. So yet definitely try the rubber duck theory. So from the top, we have read your code, trace your code through changes um, Google for Doc's Google for so for FBI docks, Google for guides, Google questions and cheque out stack overflow trying online form or communities such as our rugs that London would be users group. Or get hub issues and try the rubber duck theory. So try those things. And if none of those things work, I just definitely recommend asking someone that's like the best thing you can do is, well, just ask someone if you do not know anyone else who codes or who develops. Twitter's a great missiles off developers Follow me. Follow. If you follow me and just cheque out who I'm following or he's following me, you'll find a bunch of developers in there. I don't know if anyone has seen the uber uber is going through a lot at the moment, and so I thought I'd give them some tips and other organisations some tips on how to debug their teams. So if your organisation, who's had issues similar to uber on DH just needs help, you know, or hasn't had issues similar to you, but in terms of sexism, but just doesn't doesn't have to get the team's right, you know, people quit all the time. You don't get much attention, and all of this kind of jazz are. You don't have to treat women or ethnic minorities or members of the LGBT community. Then this is for you. So debugging team's first things first don't hire jerks. I think that's like the most important thing. No matter how good a person is at their job, if they are a jerk on when I say Jack, I don't just mean someone who's annoying I mean someone who's like sexist or, you know, racist. Those are the kinds of people you shouldn't have when your team Why? Because it will bring your company into disrepute like people going to look at your company. Imbula. Oh, that's the company who hires racist? That's the company who hires sexism misogynous. I don't want to give them my money, and then you get poor. I'm broke and you go out of business. So don't hire jerks. I also have a clear and strict code of conduct, like how should people behave at work? I'm not sure. I mean, you cope people know how to behave at work because you'd hope people know how to behave in public But apparently that's not the case. So have a clique clear and strict code of conduct have a proper reporting, an escalation process, like if something goes wrong. How do people How does your company handle that? Like where do where can people go to feel safe if they feel they're in trouble and danger? If they feel they're being abused, where can they go? Who they who can they report to you? And is that person trustworthy? Is that bull that person? Go through the proper channels and do things properly? Or will that person just think I'll crack? We just need to shut this person up, have that which brings me on to whistle blowing, like have a proper whistle blown procedure in the UK The law will protect you in certain circumstances, but not all circumstances. So definitely find out what the war is on. That because I'm not a lawyer, so I'm not even going to pretend like I know. But there are certain circumstances with the Lord will protect you. But the company, your company, the company should also have some kind of procedure for whistle blowing so that you are protected. Um, also, I mean have, like, proper like care for your employees. Like, do they have line managers who are approachable? Or do they have a buddy system? Or is there like a 1 to 1 kind of situation where their constant being checked on, Make sure everything's okay? Make sure they're protected and just feel safe, Like we spend most of what time at work. We should feel safe in our own workspace. We shouldn't have to feel like goingto work is going to be a danger to us. We're going to go to work. I'm gonna have to worry about that creepy guy who's sending us, you know, nude messages over slack and stuff like that. It's just really, really frustrating hearing the storeys of these women, especially at a company like number where you would expect that they would have proper protocol on DH. There's so much money behind them and such big fame and you known authority. That's not that word. But you know what I mean by the Notorious. So, like you would expect that, you know, women wouldn't have to go to work and feel unsafe in their own work spaces on DH, then you know you wonder why women don't stay in the industry for so long, and you wonder why they're quick to leave and why they hate it so much. Well, the like. They're treating them like crap. You're treating us like crap. So I just yeah, things that this really frustrate me. And I think it's important to have hay chair Hate are that does care about the company but also cares about the workers. I think I heard it best last year when I heard someone give a talk about how they got fired from Get Hub and he basically said, You know, they hate ours there to protect the company, which I think is true and I think is valid. But I think if hey Char were doing their job properly and protecting the company, that also looks like protecting the employees employees, and that looks like making sure the employees are safe because of your employees are safe. Your company Wal most likely be safe. Like if your employees feel safe, they'll be more productive. They'll get on with the work and you have a bang in product. If your employees for like they're in danger and harm, then the the work environment just becomes unproductive number one and also becomes really dangerous. And if your idea off protecting your company's getting rid off the people who are feeling unsafe and get rid of the people who are being abused, then that's the wrong approach. That is definitely the wrong approach. So, yeah, that's just my depends on how to debug your team. If you have any questions about that, hit me up onto a definitely. But yeah, guys, I think that's pretty much it for this episode. Um, I hope you enjoyed. There's some quick announcements, So I have started another podcast with my friend Derek. You can follow him at Backslash Baker on DH. It's called the Backslash part. Carson will basically be talking about tech, but not coding. Well, maybe code intact, but more kind of like that gadgets and like Internet off things on DH, security on DH. Laters. Phones and laptops and tablets and that kind of tech because we're both geeks and both Niki like that. So we're gonna be doing that in the first episode. Episode zero is about definitely cheque that out at backslash put on a tutor at Backslash pod onto the link will be in the descriptions. You can cheque that out, but yeah, Share this with your friends. It definitely tell people about lost in the source. You can follow us on. Tutor at Lost in the source. You can follow a blackguard second suitor at blackguard tech. And you can follow me on Twitter at Malala. Ordell, Ella, the link off. All of those will be down below, but yeah, thanks, guys.)
