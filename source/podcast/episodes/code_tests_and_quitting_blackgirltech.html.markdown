---
title: code_tests_&_quitting_blackgirl.tech
blog: podcast
published: true
date: 2019-01-30 13:31:02
duration: 00:33:41
description:
audio_link: https://lits-podcast-episodes.s3.eu-west-2.amazonaws.com/audio/code_tests_and_quitting_blackgirltech.mp3
---
<div class='row'><audio controls src='https://lits-podcast-episodes.s3.eu-west-2.amazonaws.com/audio/code_tests_and_quitting_blackgirltech.mp3' class='col-md-12'>
      Your browser does not support the <code>audio</code> element.
    </audio></div>

Transcript unavailable

[//]: # (Hello. And this is a loss in the source. I am your host, Lalla. Welcome to the show, eh? So welcome as if, Like you're here while you kind of are here. Right? Or I'm there anyway. Yes. Oh, this episode is gonna be a little bit different. I have some things to get off my chest, mainly about code tests so you could start broken on. I'm going to delve into a little bit about that in the main topic. But there's also gonna be a second main topic For those of you who don't know I run a non profit called Black Car Tech on DH. It's all about the name it does was isn't in. Basically, it's a organisation aiming to get more black women, girls, non banner people into technology. You'd have heard the ads, you'd have seen me say, girl follows on Twitter. All of that jazz on DH. I am giving up this year, so I'm going to be talking a little bit about that and then keeping on the theme of co tests in the source. I'm going to be talking about how to prepare for co tests even though they are broken so, yeah, let's get into it. So code test. What is echo test for people who are new to the industry, who've never been in the industry, who don't even want to get in the industry? But you're just kind of interested in tech. Ako test is basically a test that you do before you get a job as an engineer, a software engineer. It's a test that you do to show that you know the thing that they want you to do on the job, to show that you have a certain level of competency to do the job that they require didn't. Now here's the thing. Co tests are not regulated. Each company has a different protest, so protest for company is not gonna be the same as co test for Company B. And it's not. It may not necessarily be the same difficulty, even if you're going for the same role it made. The people at the company are the ones who create the co test, right, so there's not like a common regulation now. The thing is, Cho test, I think, do a necessary job. Programming is very practical. It's very kind of like hands on on DH. You can't really wink it unless you have certain privilege in the industry when I'm going to get into that today. But white men, I'm looking at you. And so you can't really win, get you kind of just have to show that you're good or good enough. At least the thing of co test is that are so many things of co tests. Oh, but one of the main things with co tests is that they assume everybody performs well under testing conditions off of the back, which is, you know, the same is when you're at school, when you're at uni, you know, standardised testing. All of that assumes everybody performs to the same world, performs their best in a certain kind of environment. No, some of this is gonna be really at anecdotal, and I don't think there's anything wrong with that. My experiences have value. When I was at school, testing wasn't really likea It wasn't that deep for me exams. With that deep for me, I could perform well enough in exams. I wasn't always like fantastic, but I didn't. I wasn't like terrible either. So exam situations have not always been a problem for me. However, when I came into engineering when I started having to do co tests, they became a big problem. There's slight differences between doing an exam at uni, with 30 to 100 other people in a room. No one really on your shoulder. You're just kind of there to do in a protest in a room with two other people, sometimes one or two other people who, you know, know the answer or should at least know the answer on who you know are qualified. You know, when you're in an exam situation at uni, you're all in the same kind of boat. The person who wrote the exam may or may not be there, but they usually have external refrigerators. Um, and you know, there's not. You're not trying to prove anything in that moment, right? The exam gets taken away a later date to get marked on all of this. Not to say it's not stressful. It definitely is stressful on. You know, everyone performs well even under those circumstances, but it is very different to having to perform at your peak in front of people who have your future in their hands is actually very, very different. And for me, very, very stressful. I can't think I forget things that I know and do every day, like, literally just got off the top of my head, I hope. Forgotten. I'm a Ruby engineer. I have forgotten how to create a class in a in a protest before every because simple class, Doc, You that cross name? But, you know, I forgot how to do that. Um, as well as other things that I forgot how to do. Apart from that, co tests usually. Well, there's kind of like a divide now in the industry and what to test for. Right? So some people believe that, you know, you should test algorithm, acknowledge data structures on DH. Those kind of, you know, competences. Other people believe you should test stuff that you be doing on the day to day. Now, you would think that algorithms and data structures are, you know, required day to day on DH. Thiss is more off. It depends what your job is. I'm gonna take a shot in the dark and say most web development does not require you to know what binary trees are. What linked to lists are. You may need to know what a stack and a Q is, but that kind of I've kind of learned what a Q is, at least on the job. And I've there are libraries that take care of Soran, our cues and stuff for me. I've never had to create a queue myself. That's not to say I never will need to create a Q is just to say that right now for the jobs I've had. I've never had to so become a widow. If I was being tested on those things when I've never had to do it, you know, on also that the jobs I apply for typically I don't have to do those things will be kind of weird to not be tested for that last while of companies. Do they test you for algorithmic and data structure knowledge that you don't have to do on the job on if you've been taken similar roles, you've probably never done on the drop seed over and have any experience in it. Um, on what ends up happening is either only people who have gone to university and study computer science as a degree get those jobs or people who have clock to the system and then, like cramp, cramp, cramp, cramp, cramp, cramp, cramp before big interview to get those drops, Get those jobs they don't really measure, whether your programmer or not, whether you could do the job or not, they're not accurate and measuring those things. The other camp of people are kind of like Wallace test. You know, let's test on the job stuff, stuff that we're going to be doing every day. Andi, I think this kind of testing is probably the one off the most ideal. But again, if the environment in which the person is doing the test performing the test is not one that's conducive to them being their best on is also not one that's accurate off the everyday environment in which they would be coding because it's rare that you could in a silo. In fact, you shouldn't be caught in an asylum. You should be coding, you know, kind of collaboratively unless you're the only engineer on the team. But even then you should collaborate with the stakeholders and she collaborated, collaborate. I've said the word too many times that you should collaborate with the other members off the company, right? Your users is all collaboration, right? In a testing environment, you're really collaborating with anyone. Sometimes then that you Google things and cheque things out on other times they don't. So for me, it it doesn't really show it's a step in the right direction. But it's not quite there yet. I'm also some people. Some companies say OK, you can take your test home so that you know you have the optimum environment, the best environment for you to learn how to code. Take your test hope and think again. That's a step in the right direction. But then you have a thing. CAVEATS. So they'll give you a test to take home and nobody at all. We expect this to take two hours and you're doing the test. And there's no way that this test is gonna take two hours. This test is gonna take maybe a day, maybe two days, right? And then, you know, have that kind of external pressure of these, like over over the optimistic time frames to complete something on DH that doesn't feel good. And if you do commit the two hours, you can you know better that it's not gonna be two hours of your best work. It's not going to be two hours of actual real work on if you're off the job. That task probably wouldn't take two hours anyway, so there's just kind of, like all these holes in how we test in how we measure someone's competencies. The best co test I've ever taken was with the company who are no longer in business currently, but a company called Happy Best Software. They were the best co test I have ever taken. What made them fantastic? Well, they had a clear instructions of what they wanted you to do. When I say clear, I mean crystal clear that were not open for misunderstanding or misinterpretation or anything like that. They were just very crystal clear about what they wanted you to do on. Then, after that, they basically said, This is they split the test into So one was like technical writing, which wasn't really that technical technical is just a block post about something you've loved. And then the other bit was, you know, practical, like building an app on DH. They also said, We don't we don't want you to focus on these things, and you only want you to focus on these things. So you know there's so many ways you can board and up there so many things you can think about on. They made it so easy for me by saying, Don't bother thinking about these things because you, we're not We're not checking for that were only checking for doing thes specific things very, very clear. It was just such a good coat. They paid me for my time. Whether I pass the test or not, they paid me. I think it was £200 to do it or else about It was amazing they had. They sent me a mark scheme like a marking scheme to Cana. Sure how they were marking the test so I could explicitly see again. It's just about clarity and explicitly seeing what you're being tested for. This just made it so easy for me toe focus on the task at hand and focus on the test, and it was important for them. I think, to do it that way as well because then agency. So the person that's coming into the role needs to be able to take a set of instructions from a user or from a customer. Andi, you know, implement those things. They need to be ableto take a crystal clear like Okay, this is what the customer wants. This is how they want it. This is you know how they don't want it on, you know, create and follow those instructions properly. So I think it was an excellent test. I passed it on DH. I couldn't hire me that they couldn't. Hi me at the time I pass a test, but then the next year, they had hunted me at the company. I was I didn't end up taking it. But, you know, I still think that was the best cutest I've ever taken on. Then the worst protest I've ever taken. I can't really think of like a You know, at the moment I can't think of like, a co test. Where is just, like, terrible. I'll tell you my kind of process of protest before I get to like the worst, right? My process of Caucasus is I read the test and it usually will have some ambiguity. And I'd be like, Oh, what does that mean? What does that mean? And then I panic like I just going to straight panic mode immediately. And I'm like, Oh, they want me to rewrite the whole ruby library and like, they want me to be right, this whole jam or this whole, you know, package or whatever from scratch. And then I come down and I'm like, Oh, wait, no, they don't. They use what means to implement this thing. And then, you know, I spend a few hours just trying to figure out the instructions, how to implement the thing, Googling and stuff like that before actually, you know, coming to terms and doing the thing right. It takes a while. It's a stressful process, is really stressful. I've cried. In fact, actually, I do know the worst protest I took is not the worst, but I cried. Well, I cry in most protests, but the so recently I heard a co test for I'm just good. Let's just call them paper company. Let's call them Dunder Mifflin. I had a protest for Dunder Mifflin and the protest was split into one was an algorithmic challenge, and the other was, you know, more, I guess practical innocence right now that our government challenge. I'm teaching myself. I'm teaching myself data structures and algorithms, I say teaching myself. I'm taking a you Timmy course on their structures and our algorithms right now. This as soon as I said I was just like off, For goodness sake I didn't immediately understand was asking for me. So I had to spend a little bit of time just like China rearrange the words in a way that made sense to me when I got there, which I think is really, really important when I got there, I say there, when I got past that bit started became about implementation. Now and you know, you start to think about how to do it. Eventually, I was able to do it, got it working, whatever. And then I did see Ah, that's it. The APP building now the at building for me was supposed to be the easier part because that's the bit that I do every pass a bit. That's my job, you know? So I'm used to build an app. So I'm used to thinking about databases on models. Had that connected and stuff like this, they gave me a new app which is basically we have three tables on DH. We want you to implement these features. Andi, this is how these three tables are related to each other. They use the relational database. This is how these two tables are related to each other. Now, I did the thing and it took me a few days to do the thing. Well, it took me like, a few days, but, you know, two hours here, two hours, they're kind of thing, right to do the thing. And it got to a point. I was like, What they're asking off me. The amount ofthe stuff they work for me is too much to do in in any reasonable timeframe for co test. So I didn't finish intentionally cause I was like, Well, my time is getting eaten away at this, so I sent him an email. I was basically I Here's what I've done here is my algorithm. Here's my, um you know, the app. And I didn't complete because time commitment, blah, blah, blah. And then within half an hour, he sent me an email like of checked out. But you don't quite meet the bar. So I was upset because I felt like I thought my code was good. I felt like, you know, I put in effort but we still decided to have a talk about it. And when we spoke about it, what it boiled down to is lack of clarity in his instructions, off what he wanted from the co test. So what I had done, it works. It's, you know, useful. I had added another table which wasn't axed off me, and he had pointed out things that oh, out of basically he wanted someone to do it the way he would have done it. So it's less over. I've not met the bar are more for implementation ish implementation, conflict like how I implemented it is not how he implemented it, but both implementations work on DH. There are benefits and disadvantages to both implementations now, usually in a protest. That's something you would discuss with the person like you talk about implementation. You talk about the costs and the risk analysis and the cost benefits off different implementations so that they understand how you think. Because really, that's what it boils down to. How do you think So? He did say that I could do the co test again if I wanted Teo, I'm not going to, but, you know, there was just kind of, like a lack. Aww. Hey, if you could do that in a protest, that means there's not gonna be much discussion on the job. There's not gonna be much talking about how things should be built on the job, which is not the kind of agreement I want to work in. That may work well for others, but definitely not for me on DH. Also the algorithm that he that for the protest was something he got off the Internet. And it was so easy for me to find the algorithm and to find the answer to the egg room. I didn't cheat because I take a lot of pride in doing things myself. But, I mean, anyone else could've just cheat. And anyone still can cheat, man, just, you know, get the solution right. Anyway, so that was kind of like and not so great experience. But I've had quite a few not so great experience in protest, you know? So there's definitely a thing in the industry just in terms of, like, lack off consistency, lack. Aww. Um, doesn't it you know, they'll say you don't meet the bar and then you find out that it's not that you don't meet the buy, you do meet the bar. You're intelligent, you're worth it. Your blah, blah, blah. But the testing environments on DNA testing methods I just really, really rubbish, you know, however, you know co tests are the only way we've got it. The only way that people seem to be ableto assess programmers, and it's interesting when I speak into the guy from Dunder Mifflin he was saying that he knows that he's probably half of the people he's goingto higher are probably not gonna work out. And I just kind of like, What is it that you see that as a floor in your hiring practises? Like, if you're going to do a big, higher push on DH, you're Do you know half of people you're gonna hire not gonna work on? You know, Brenneman, this is not supposed to be a job where there's high turnover, then isn't that a problem in how you hire and maybe even in your co tests? So yeah, that's kind of like my Ron on code says that they're broken their broken. However, they are useful. They don't want to, you know, be too pessimistic. I do think they're useful, and I do think it's useful to test these things. I just think they're better ways to do it, for example, having more of a discussion. Like, you know, someone told me of a co test they did for another company, where instead ofthe actually coding, they gave them a problem. And you're like, How would you build a solution to this problem, which I think is a little bit lighter, you know, a little bit easier to talk about how you build something rather than building it there on the spot. And it's more of a discussion. You can get input from your interviewers and all of this kind of stuff. I also know some people found it difficult to talk. Maybe we should be allowed to choose which one you know fits us better. Anyway, that's it. On co tests, I will be talking a bit in the source about how to prepare for protests, although, you know, I haven't really got that down pat just yet, But yeah, let's move onto the next topic. I'm going to try and be quick cause I don't want this podcast to be too long, but I So, as I mentioned, I am the founder of Black Caltech. I have been running blackguard text since 2014 on we were incorporated as a nonprofit. Even if incorporated is the right word, we became an official legal non profit in 2016. So, you know, it's been around five ish years, which, well, is going to be five years in October, which is I mean, I'm proud of that. I'm really proud of that. We've definitely impacted a lot of women on non burning people, girls as well. We've we've made an impact, you know? And I'm really proud of the impact of maid. I wrote a block post which are linking the description about, you know, shutting the shutting things down. But a few things basically impacted My decision. First thing is, I do not want to run a non profit or any kind of business just yet. Just yeah, basically, I don't run around. I don't want to run our business. Running a nonprofit is full time work. If I own a business, I want me to be the only employee. And, you know, some people say that selfish, not providing jobs, blah, blah, blah, blah, blah. Well, I don't want to manage anybody. I don't want to be responsible for anybody else except for myself. Like I don't want to think about If you go out of business, you know, 5 10 people lose their jobs or if you're rubbish at your job, I have to fire you, you know, or, you know, thinking about your growth and stuff. I want to impact people's growth in other ways. I really out in terms of managing people are only really interested in the positives. I want you. I want to impact your course and your learning. I don't wanna have to be like, Oh, you're not doing so well right now. Oh, stressing about other people's livelihoods. I don't want to do that on the scale at which blackguard circles growing, we probably would have had to get there. So I also don't want to be chasing after you want to do their job, which is like a pet peeve of mine. Like if you're gonna do it, do it. But the thing of volunteering is that it's volunteering. I'm not paying anyone, say also can't expect people. Teo, just, you know, do what I ask off them, especially if it comes. If it interferes with their, you know, work, they're paid work, right, because that's unreasonable. So there is that aspect to it. There's also the fact that, you know, I running blackguard takes a full time job, and I love engineering, which is also a full time job for me, and having two full time jobs is not conducive to me, like is really stressful. It's a lot of work on, and I just came back from a six week break on. Guy took a break from everything. I took a break from work. I took a break from Black Girl Tech and I just didn't do anything for six weeks, and I was initially quite hard to kind of just have a break. But also, I mean, at the end of I just felt so believed in relax, then coming back into it. I mean, it's just stress again, you know, and I want to focus on a thing at a time, you know, especially this year, where when I focus on growing myself as an engineer and you know it basically becoming better, like I want to invest in becoming better, Better engineer, software engineer. So there's that. And also there's a thing about money now finance. This is really it's interesting. So we got a large donation last year off 20 K. Before that, we had smaller donations and things people would donate to us, which are very, very grateful for And then we also would have. We also would have much McAuliffe at the funding from 38 degrees, which were also greedy, grateful for on DH. Apart from that, that was that was kind of it get in. Being in the game of, like requesting funding, trying to get funding is a stressful, stressful thing. Like you have to meet people you have toe meet with people who already believe in your vision. I don't have time to be right in front of applications and doing all of this and you know you have If you get funding from anywhere, you have to kind of let be specific in what you're going to use the funding for and blah, blah, blah and you know she don't get the funding. Then you have to start worrying about how things are going to get paid for on blah, blah, blah. So my thing was always to make blackguard tech something that generated its own funds. But, I mean, just bring me about 2.1 or two Carmen which point it was now, but a lot of work. I think what it really boils down to his running black gotta kiss a lot off work and it's a lot of full time work on DH running for doing that full time work with, You know, um, with if my engineering is difficult and also in terms of support, I did get support from that. My good friends and people who really cared. But when I look at how other similar organisations have benefited and grown and, you know expanded, it wasn't nearly the same if I'm honest with you And last year the workshop numbers were dwindling on DH, we weren't getting the same kind of, you know, we won't get the same kind of turnout. We won't get the same kind of interest, which is fair enough people aren't that interested in it. That is totally fine. But also there must come a time when I'm like, Okay, cool. Well, why am I doing this? You know all of that to say the black car tech is closing, but we will be alive in some capacity. You know, we are still gonna be doing some small, very minimal work. I'm talking about the minimalist off the minimalist. Like we will be doing a little tiny bit of work. We will not be officially and nonprofit anymore. And after this year, we will stop collecting donations. But yes, that is kind of where things stand on Black go tech. All right, so I think it's time to get into source now. Okay, so we're not in the source where explain something technical or technical adjacent. Today we're gonna be talking about preparing for protests, and actually, I'm going to switch things up because I realised that I don't actually know how to prepare for a co test, apart from, like, you know, making sure that because you never know what is hard to prepare for a code because you never know what you're gonna get. You don't know if you're going to get algorithm. You don't know if you're going to get an AP, You don't know if you're going to get discussion like you don't know what you're gonna get for co test, but regardless ofthe if the co test is any of those things or take home or in house whatever, I think there are things you can do to make things a little bit lighter for you during the test. S o. I'm just going to go through, like, three key things for me that I have definitely helped to make things lighter for me during the test. First thing is making sure understand what's being angst of me on DH. That means reading and re reading and writing out the or asking are saying out the instructions in my own words and getting clarification on that, especially if its in house that's a lot easier to do. Just clarify if this is what's being arcs of you. So you understand what's really you know, being arcs of you on DH. That just helps me reframe things in my mind. It helps me know that I understand what's being arcs of me on it. If it's in my own words and I understand it, it usually puts me on a more positive step forward because the first thing is understanding what's going on and then the next things implemented implementing it. So that's tip number one. Reframing the question in my own words to make sure I understand Number two is more about tactics you can use. Teo. Help yourself do the thing if you're in a co test with a loud like in House co tests and they allow you to Google. Utilise Google utilise utilise utilise Google If they don't ally to Google, then I'm not too sure what you could. Actually, I am I do. You know what you can do and I'll cut to get to that in a minute. But I've never been in a situation where I'm not allowed to Google for stuff. So hopefully you're also in situations where you can Google for things. And I think that's also like an indication on their part on, you know, have expects you to work because when I'm working, I mean and I'm sure a lot of engineers do this to a lot of engineers. I have work to do this too. You search the Internet for answers sometimes, like sometimes you hit a roadblock you don't know what's. He searched the Internet for answers on DH. It's actually a really good way to work. But yes, Googling Things is really, you know, helps. You know that there are other resource is out there. You're not alone, even if this interviewer is is, you know, kind of invisible. But there you're not alone. You can lean on other things, and it's not just your brain. Just your head you can use other people said on, I guess adjacent to that. If you're not allowed to Google, then arts. The interviewer questions arcs them, not questions on how to do things are hard to implement things. But, you know, if you've forgotten something I think is safe enough to kind of be not Oh, um, I can't I couldn't remember howto do this, but his why would have done in your code as your right and right comments and this stuff, you know, asking questions. If you can't really be asking the interviewer directly, maybe it's a take home test. Or maybe the person interviewing you use not a technical person but right comments in your right, comments in your code as questions you know, and that brings me onto the third and final thing, which is talk. This is something that or communicate. This is something that I think is a bit iffy because barely even if I'm paid programming, really Do I like it's difficult to talk and type of think all at the same time, S O. I think this one's a bit, you know, iffy. But there are benefits to talk into your interviewer and explaining what it is you're doing and why you're doing it. And if that's difficult for you, feel free tow. You know, put those things in comments, right? Those things in comments to just communicate your ideas, communicate what you're doing. And so the interview really gets an understanding and how you think So the three tips are communicate ask questions in Google and rephrased the instructions in your own words. So you understand. And that's pretty much it for lost in the source this week. Please, please, please subscribe on Soundcloud Subscribe on spotify subscribe on iTunes were lost in the source everywhere, including Twitter. Follow me on too tight at lost in the source on. I will probably be seeing you next week because I think I'm gonna make this a weekly thing. So see you next week, probably on Thursday, and yet it's been great.)
